{"ast":null,"code":"var _jsxFileName = \"/home/hagar/PycharmProjects/my-app/src/components/calcPrecent.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalcPercent = () => {\n  const cleanPercentage = percentage => {\n    const isNegativeOrNaN = !Number.isFinite(+percentage) || percentage < 0; // we can set non-numbers to 0 here\n\n    const isTooHigh = percentage > 100;\n    return isNegativeOrNaN ? 0 : isTooHigh ? 100 : +percentage;\n  };\n\n  const Circle = _ref => {\n    let {\n      colour,\n      percentage\n    } = _ref;\n    const r = 70;\n    const circ = 2 * Math.PI * r;\n    const strokePct = (100 - percentage) * circ / 100; // where stroke will start, e.g. from 15% to 100%.\n\n    return /*#__PURE__*/_jsxDEV(\"circle\", {\n      r: r,\n      cx: 100,\n      cy: 100,\n      fill: \"transparent\",\n      stroke: strokePct !== circ ? colour : \"\" // remove colour as 0% sets full circumference\n      ,\n      strokeWidth: \"2rem\",\n      strokeDasharray: circ,\n      strokeDashoffset: percentage ? strokePct : 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this);\n  };\n\n  const Text = _ref2 => {\n    let {\n      percentage\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"50%\",\n      y: \"50%\",\n      dominantBaseline: \"central\",\n      textAnchor: \"middle\",\n      fontSize: \"1.5em\",\n      children: [percentage.toFixed(0), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  };\n\n  const Pie = _ref3 => {\n    let {\n      percentage,\n      colour\n    } = _ref3;\n    const pct = cleanPercentage(percentage);\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: 200,\n      height: 200,\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `rotate(-90 ${\"100 100\"})`,\n        children: [/*#__PURE__*/_jsxDEV(Circle, {\n          colour: \"lightgrey\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Circle, {\n          colour: colour,\n          percentage: pct\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        percentage: pct\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  };\n};\n\n_c = CalcPercent;\nexport default CalcPercent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalcPercent\");","map":{"version":3,"sources":["/home/hagar/PycharmProjects/my-app/src/components/calcPrecent.js"],"names":["React","CalcPercent","cleanPercentage","percentage","isNegativeOrNaN","Number","isFinite","isTooHigh","Circle","colour","r","circ","Math","PI","strokePct","Text","toFixed","Pie","pct"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,eAAe,GAAIC,UAAD,IAAgB;AACpC,UAAMC,eAAe,GAAG,CAACC,MAAM,CAACC,QAAP,CAAgB,CAACH,UAAjB,CAAD,IAAiCA,UAAU,GAAG,CAAtE,CADoC,CACqC;;AACzE,UAAMI,SAAS,GAAGJ,UAAU,GAAG,GAA/B;AACA,WAAOC,eAAe,GAAG,CAAH,GAAOG,SAAS,GAAG,GAAH,GAAS,CAACJ,UAAhD;AACH,GAJD;;AAMA,QAAMK,MAAM,GAAG,QAA0B;AAAA,QAAzB;AAACC,MAAAA,MAAD;AAASN,MAAAA;AAAT,KAAyB;AACrC,UAAMO,CAAC,GAAG,EAAV;AACA,UAAMC,IAAI,GAAG,IAAIC,IAAI,CAACC,EAAT,GAAcH,CAA3B;AACA,UAAMI,SAAS,GAAI,CAAC,MAAMX,UAAP,IAAqBQ,IAAtB,GAA8B,GAAhD,CAHqC,CAGgB;;AACrD,wBACI;AACI,MAAA,CAAC,EAAED,CADP;AAEI,MAAA,EAAE,EAAE,GAFR;AAGI,MAAA,EAAE,EAAE,GAHR;AAII,MAAA,IAAI,EAAC,aAJT;AAKI,MAAA,MAAM,EAAEI,SAAS,KAAKH,IAAd,GAAqBF,MAArB,GAA8B,EAL1C,CAK8C;AAL9C;AAMI,MAAA,WAAW,EAAE,MANjB;AAOI,MAAA,eAAe,EAAEE,IAPrB;AAQI,MAAA,gBAAgB,EAAER,UAAU,GAAGW,SAAH,GAAe;AAR/C;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH,GAhBD;;AAkBA,QAAMC,IAAI,GAAG,SAAkB;AAAA,QAAjB;AAACZ,MAAAA;AAAD,KAAiB;AAC3B,wBACI;AACI,MAAA,CAAC,EAAC,KADN;AAEI,MAAA,CAAC,EAAC,KAFN;AAGI,MAAA,gBAAgB,EAAC,SAHrB;AAII,MAAA,UAAU,EAAC,QAJf;AAKI,MAAA,QAAQ,EAAE,OALd;AAAA,iBAOKA,UAAU,CAACa,OAAX,CAAmB,CAAnB,CAPL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH,GAZD;;AAcA,QAAMC,GAAG,GAAG,SAA0B;AAAA,QAAzB;AAACd,MAAAA,UAAD;AAAaM,MAAAA;AAAb,KAAyB;AAClC,UAAMS,GAAG,GAAGhB,eAAe,CAACC,UAAD,CAA3B;AACA,wBACI;AAAK,MAAA,KAAK,EAAE,GAAZ;AAAiB,MAAA,MAAM,EAAE,GAAzB;AAAA,8BACI;AAAG,QAAA,SAAS,EAAG,cAAa,SAAU,GAAtC;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAEM,MAAhB;AAAwB,UAAA,UAAU,EAAES;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,IAAD;AAAM,QAAA,UAAU,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAXD;AAYH,CAnDD;;KAAMjB,W;AAqDN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nconst CalcPercent = () => {\n    const cleanPercentage = (percentage) => {\n        const isNegativeOrNaN = !Number.isFinite(+percentage) || percentage < 0; // we can set non-numbers to 0 here\n        const isTooHigh = percentage > 100;\n        return isNegativeOrNaN ? 0 : isTooHigh ? 100 : +percentage;\n    };\n\n    const Circle = ({colour, percentage}) => {\n        const r = 70;\n        const circ = 2 * Math.PI * r;\n        const strokePct = ((100 - percentage) * circ) / 100; // where stroke will start, e.g. from 15% to 100%.\n        return (\n            <circle\n                r={r}\n                cx={100}\n                cy={100}\n                fill=\"transparent\"\n                stroke={strokePct !== circ ? colour : \"\"} // remove colour as 0% sets full circumference\n                strokeWidth={\"2rem\"}\n                strokeDasharray={circ}\n                strokeDashoffset={percentage ? strokePct : 0}\n            ></circle>\n        );\n    };\n\n    const Text = ({percentage}) => {\n        return (\n            <text\n                x=\"50%\"\n                y=\"50%\"\n                dominantBaseline=\"central\"\n                textAnchor=\"middle\"\n                fontSize={\"1.5em\"}\n            >\n                {percentage.toFixed(0)}%\n            </text>\n        );\n    };\n\n    const Pie = ({percentage, colour}) => {\n        const pct = cleanPercentage(percentage);\n        return (\n            <svg width={200} height={200}>\n                <g transform={`rotate(-90 ${\"100 100\"})`}>\n                    <Circle colour=\"lightgrey\"/>\n                    <Circle colour={colour} percentage={pct}/>\n                </g>\n                <Text percentage={pct}/>\n            </svg>\n        );\n    };\n}\n\nexport default CalcPercent"]},"metadata":{},"sourceType":"module"}